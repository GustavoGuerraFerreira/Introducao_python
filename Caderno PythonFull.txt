Ambiente virtual:
 - Cópia do interpretador python para um projeto
 #Criar um ambiente virtual:
	python -m venv venv - windowns
	python3 -m venv venv - Linux	
 #Ativar o ambiente virtual:
	venv\Scripts\Activate.ps1 - powerShell - windows
	venv\Scripts\Activate.bat - cmd - windows
	source venv/bin/activate - Linux
	
 #Rodar o arquivo no ambiente virtual:
	python nome-do-arquivo.py

variavel:
 - Espaço na sua memória Ram que armazena uma informação
 - Posição na memória ram
 - type(variavel) -> função que fala o tipo da variavel

Tipos de dados:
 - int (inteiro) -10 -100000 1000 10 0 
 - float (decimal) -10.1 -10.14324 10.8 20.65 1000.23
 - str(string) cadeia de caracteres "Caio Sampaino" 'Marcos' '0'
 - bool (Boleano) True False

Saída de dados:
 - Onde o computador envia informações processadas
	print("conteudo-da-string") -> Mostra uma informação na tela
	print(f"Sua idade é: {idade}") -> String formatada, considera operções

Entrada de dados:
 - Onde o usuário passa informação para o computador
	input() -> Pega uma informação do usuário
	input("conteudo-da-string") -> Além de pegar informação, passa uma string
	nome = input("Digite seu nome: ") -> Atribuída a uma variável

Conversão de dados:
 - Transformar um tipo de dado para outro
 - precisar haver uma lógica para conversão
	int(variavel) -> transforma a variavel em valor inteiro
	str(variavel) -> transforma a variavel em valor String
	float(variavel) -> transforma a variavel em valor Flutuante

Operadores aritméticos:
 - Responsável por fazer operações matemáticas
	5 + 2 = 7 -> adição 
	5 - 2 = 3 -> subtração
	5 * 2 = 10 -> multiplicação
	5 / 2 = 2.5 -> divisão
	5 % 2 = 1  -> resto
	5 ** 2 = 25 -> potência 
 - O python usa uma Biblioteca para calcular a raiz quadrada:
	import math
	math.sqrt(variavel) 
 - Ordem de Precedência:
	1º  ()
	2º  **
	3º  * / %
	4º  + - 

Operadores relacionais:
 - Faz uma Comparação/Relação entre dois valores
 - Retorna True or False
        5 > 2 ->  true  -> maior
        7 < 4  -> false -> menor
        8 >= 8 -> true  -> maior ou igual
        9 <= 7 -> false -> menor ou igual
        5 == 5 -> true  -> igual
        4 != 4 -> false -> diferente 

Operadores Lógicos:
- Faz Comparação entre verdadeiros e falsos
- Retorna True or False
	and ->True and True -> Ambos os lados devem ser True	
	or ->True or False -> Um dos lados deve ser True
	not(5 > 2) -> Inverte a comparação True para false
Estrutura de Decisão:
- Executa um determinado bloco de código, somente se uma condição
for verdadeira
- condição montada com operadores lógicos e relacionais
	if condição: -> executa o bloco se a condição for verdadeira
	elif condição -> executa o bloco se o if for falso e a condição verdadeira
	else -> executa o bloco se o if e elif forem falsos
Laço de repetição:
- Executa um bloco de código várias vezes, até que a condição seja falsa
	while condição: -> executa o código até a condição ser falsa
		continue -> Volta para o inicio do código
		break -> Encerra o código
		- usado quando não sabe quantas vezes o bloco de código será repirito
	for i in range(0,5): executa o código no intervalo estabelecido
		range(começa,termina,passo) -> função que cria um intervalo	 
			- range(0,100,2) -> começa em 0, temina em 100 e anda de 2 em 2
Listas:
- armazena várias informações
- lista um conjunto de dados em uma única variável
- Guiado por index começando por 0
	nomes = ['Felipe', 'João', 'Matheus']  
	numeros = list(range(0,5)) -> cria uma lista de 1 até 4
	print(nomes) -> Retorna ['João', 'Lucas', 'Matheus', 'Carlos']
	print(nome[1]) -> Retorna Lucas
	len() -> retorna a quantidade de elementos de uma lista
-Alterando dados de uma lista:
	nomes[index que deseja alterar] = "Gustavo"
-Adicionar elemento na lista:
	nomes.append('Estevão') -> adiciona um elemento no final da lista
	-Adicionar um elemento em qualquer lugar da lista:
		nomes.insert(index, "Lucas")

-Remoção de elemento na lista:
	-Remoção por index:
		nomes.pop() -> remove o último elemento da lista
		nomes.pop(index) -> remove o elemento que está no index
	-Remoção por valor:
		nomes.remove('Matheus') -> remove o elemento que tem o valor 'Matheus'
-Buscar o index de um elemento de uma lista
	nomes.index('Felipe') -> retorna o index do elemento com o valor 'Felipe'

-Ordenação:
	nomes.sort() -> Altera a lista original e coloca em ordem crescente alfabética/numeral
	nomes.sort(reverse = true) -> Altera a lista original e coloca em ordem descrecente alfabética/numeral
	sorted(nomes) -> Não altera a lista original e coloca em ordem crescente alfabética/numeral
	sorted(nomes, reverse= true) -> Não altera a lista original e coloca em ordem descrecente alfabética/numeral
-Iteração(percorrer cada um dos elementos):
	idades = [3,5,27,1,2,45,60,6,1.5]
	- Por index:
		for i in range(0, len(idades)):
			print(i) -> retorna o index
			print(idades[i]) -> retorna o valor do elemento
	- Por Elemento:
		for i in idade:
			print(i) -> retorna o valor do elemento
	- Por index e Elemento:
		enumerate() -> enumera os elemento da lista
		x = list(enumerate(idades))
		for i in enumerate(idades):
			print(i) -> retorna uma tupla com o index e o elemento

		for i,j in enumerate(idades):
			print(f'i = {i} j = {j}') -> retorna o index e o elemento em variaveis diferentes
Dicionário
- Armazena valores através de chave
	x = {"chave": "valor"}
	pessoa = { 'Nome': 'Gustavo', 'idade': 20, 'cep': 1414234124 }
- adiconar uma chave e valor:
	pessoa.update({'cep':'29100240', 'rua' : 'minha rua' })
- buscar por chave:
	pessoa.keys()
- buscar por valor:
	pessoa.values()
- iterando:
	traz uma tupla 
	pessoa.items()

Conjuntos
	são lista que não repete os valores
	x = {1,2,3,4,5}
	y = {6,7,8,9,10}
	set() -> transforma em conjuntos
- União de conjuntos:
	junta os conjuntos
	x = x.union(y)
- Intersecção:
	traz os valores que aparecem nos dois conjuntos
	x= x.intersection(y)
- Diferença:
	retira os valores iguais do conjuntos
	x = x.difference(y)
- Diferença de união
	faz uma união sem os valores de intersecção
	x= x.symmetric_difference(y)

função
	uma estrutura que pode receber ou não valor, processar uma informação
	e executar uma determinada ação
	
- Sem Parâmetros:
	def minha_funcao():	-> função que retorna "teste"
		print("teste")
- Com Parâmetros limitados:
	é necessário passar valor no parâmetro da função
	utiliza os parâmetros para determinada funcionalidade

	def soma_numeros(n1, n2):
	    print(n1 + n2)
	
	soma_numeros(5, 2)
- Com Parâmetros ilimitados:

	- *args
		Parêmetro que permite entrada de vários argumentos
		transforma os parâmetros em uma tupla
		def soma_numeros(*args):
  		  soma = 0
   		  for i in args:
        		soma = soma + i
    		  print(soma)

		soma_numeros(1,2,3,4,5,6,7,8,9)	
	
	- **kwargs:
		Parêmetro que permite entrada de vários argumentos
		Transforma os parâmetros em um dicionário
		precisa dar nomes aos parâmetros

		def soma_numeros2(**kwargs):
     		    x =kwargs.get('teste3')
     		    if x :
          		 print('foi passado')
     		    else:
          		 print('Não foi passado')

		soma_numeros2(teste1 = 1, teste2 = 2, teste3 = 3)

- Retorno de valores da função:
	faz a função retornar um valor e ser possivel manipula-lo
	o código abaixo do return não será executado
	def soma_valores(n1, n2):
    	    soma = n1 + n2
   	    return soma

	x = soma_valores(1,2) + 1
	print(x)
	
modularização
	dividir o seu projetos em diversos arquivos, podendo assim
	importar as funcionalidades desse arquivo

	#import minha_lib  # Traz tudo para o arquivo principal
	#from minha_lib import * # Traz tudo o que tem na biblioteca
	#from minha_lib import x # Traz somente a variavel x da minha_lib
	#from minha_lib import x as x_importado # Traz a variavel e muda o nome dela
	#from minha_lib import soma_numero # Traz a função soma_numero
	#from minhas_funcoes.minha_lib import soma_numero # Trazendo a função de outra pasta

	
Tratamento de exceção
	Evita de mostrar para o usuário o erro no código
	tenta fazer o código, caso não consiga entra em um exceção
	n1 = int(input('Digite um número: '))
	n2 = int(input('Digite um número: '))

	try:
    	   print(n1/n2)
	except:
           print('Não consegui')
	finally:
   	   print('Finalizado')

- exceções com base em diferentes erros:
	try:
    		x = int(input('Digite um número: '))
    		print(5/x)
	except ValueError:
    		print('Digite um número inteiro!')
	except ZeroDivisionError:
    		print('Não digite 0!')

- capturar a exceção que foi dada
	try:
    		x = int(input('Digite um número: '))
    		print(5/x)
	except Exception as e:
   		 print(e)
raise e assert
	comandos específicos do python para levantamento de exceções
	 - o comando raise vai obrigar que levante uma exceção no programa
		raise ValueError("não deu bom")
		def soma(n1, n2):
    			if n1 < 0 or n2 < 0:
           			 raise ValueError("n1 e n2 não podem ser negativos")
   			return n1 + n2
		print(soma(2,2))

    print(soma(2,2))
	 - o comando assert, força para algo ser verdade
		x = 5
		assert x > 0, "não deu bom"
		print(x)

função filter:
	recebe uma função e uma lista e retorna o valor segundo a condição
	filter(função, lista)
	x = [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
	x = list(filter(lambda x: x < 18, x))
	
função map:
	recebe uma função e uma lista e retorna o valor segundo a condição
	tem como objetivo mudar ou transformar um elemento de uma lista
	map(função, lista)
	x = [ i for i in range (12, 26)]
	x = list(map(lambda x: 10 if x < 18 else(x),x))

Arquivos:
	para abrir/criar um arquivo:
	arquivo = open('nome-do-arquivo.extensão', 'a, r ou w')
		a - adicionar
		r - ler
		w - escrever
	escrever alguma mensagem no arquivo:
		arquivo.write('ola')
	para ler o arquivo inteiro:
		resultados = arquivo.read()
		print(resultados)
	abrir o arquivo em contexto:
		with open('nome-do-arquivo.extensão', 'a, r ou w'):
		assim o arquivo não precisa ser fechado
