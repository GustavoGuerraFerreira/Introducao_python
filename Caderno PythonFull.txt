Ambiente virtual:
 - Cópia do interpretador python para um projeto
 #Criar um ambiente virtual:
	python -m venv venv - windowns
	python3 -m venv venv - Linux	
 #Ativar o ambiente virtual:
	venv\Scripts\Activate.ps1 - powerShell - windows
	venv\Scripts\Activate.bat - cmd - windows
	source venv/bin/activate - Linux
	
 #Rodar o arquivo no ambiente virtual:
	python nome-do-arquivo.py

variavel:
 - Espaço na sua memória Ram que armazena uma informação
 - Posição na memória ram
 - type(variavel) -> função que fala o tipo da variavel

Tipos de dados:
 - int (inteiro) -10 -100000 1000 10 0 
 - float (decimal) -10.1 -10.14324 10.8 20.65 1000.23
 - str(string) cadeia de caracteres "Caio Sampaino" 'Marcos' '0'
 - bool (Boleano) True False

Saída de dados:
 - Onde o computador envia informações processadas
	print("conteudo-da-string") -> Mostra uma informação na tela
	print(f"Sua idade é: {idade}") -> String formatada, considera operções

Entrada de dados:
 - Onde o usuário passa informação para o computador
	input() -> Pega uma informação do usuário
	input("conteudo-da-string") -> Além de pegar informação, passa uma string
	nome = input("Digite seu nome: ") -> Atribuída a uma variável

Conversão de dados:
 - Transformar um tipo de dado para outro
 - precisar haver uma lógica para conversão
	int(variavel) -> transforma a variavel em valor inteiro
	str(variavel) -> transforma a variavel em valor String
	float(variavel) -> transforma a variavel em valor Flutuante

Operadores aritméticos:
 - Responsável por fazer operações matemáticas
	5 + 2 = 7 -> adição 
	5 - 2 = 3 -> subtração
	5 * 2 = 10 -> multiplicação
	5 / 2 = 2.5 -> divisão
	5 % 2 = 1  -> resto
	5 ** 2 = 25 -> potência 
 - O python usa uma Biblioteca para calcular a raiz quadrada:
	import math
	math.sqrt(variavel) 
 - Ordem de Precedência:
	1º  ()
	2º  **
	3º  * / %
	4º  + - 

Operadores relacionais:
 - Faz uma Comparação/Relação entre dois valores
 - Retorna True or False
        5 > 2 ->  true  -> maior
        7 < 4  -> false -> menor
        8 >= 8 -> true  -> maior ou igual
        9 <= 7 -> false -> menor ou igual
        5 == 5 -> true  -> igual
        4 != 4 -> false -> diferente 

Operadores Lógicos:
- Faz Comparação entre verdadeiros e falsos
- Retorna True or False
	and ->True and True -> Ambos os lados devem ser True	
	or ->True or False -> Um dos lados deve ser True
	not(5 > 2) -> Inverte a comparação True para false
Estrutura de Decisão:
- Executa um determinado bloco de código, somente se uma condição
for verdadeira
- condição montada com operadores lógicos e relacionais
	if condição: -> executa o bloco se a condição for verdadeira
	elif condição -> executa o bloco se o if for falso e a condição verdadeira
	else -> executa o bloco se o if e elif forem falsos
Laço de repetição:
- Executa um bloco de código várias vezes, até que a condição seja falsa
	while condição: -> executa o código até a condição ser falsa
		continue -> Volta para o inicio do código
		break -> Encerra o código
		- usado quando não sabe quantas vezes o bloco de código será repirito
	for i in range(0,5): executa o código no intervalo estabelecido
		range(começa,termina,passo) -> função que cria um intervalo	 
			- range(0,100,2) -> começa em 0, temina em 100 e anda de 2 em 2
Listas:
- armazena várias informações
- lista um conjunto de dados em uma única variável
- Guiado por index começando por 0
	nomes = ['Felipe', 'João', 'Matheus']  
	numeros = list(range(0,5)) -> cria uma lista de 1 até 4
	print(nomes) -> Retorna ['João', 'Lucas', 'Matheus', 'Carlos']
	print(nome[1]) -> Retorna Lucas
	len() -> retorna a quantidade de elementos de uma lista
-Alterando dados de uma lista:
	nomes[index que deseja alterar] = "Gustavo"
-Adicionar elemento na lista:
	nomes.append('Estevão') -> adiciona um elemento no final da lista
	-Adicionar um elemento em qualquer lugar da lista:
		nomes.insert(index, "Lucas")

-Remoção de elemento na lista:
	-Remoção por index:
		nomes.pop() -> remove o último elemento da lista
		nomes.pop(index) -> remove o elemento que está no index
	-Remoção por valor:
		nomes.remove('Matheus') -> remove o elemento que tem o valor 'Matheus'
-Buscar o index de um elemento de uma lista
	nomes.index('Felipe') -> retorna o index do elemento com o valor 'Felipe'

-Ordenação:
	nomes.sort() -> Altera a lista original e coloca em ordem crescente alfabética/numeral
	nomes.sort(reverse = true) -> Altera a lista original e coloca em ordem descrecente alfabética/numeral
	sorted(nomes) -> Não altera a lista original e coloca em ordem crescente alfabética/numeral
	sorted(nomes, reverse= true) -> Não altera a lista original e coloca em ordem descrecente alfabética/numeral
-Iteração(percorrer cada um dos elementos):
	idade = [3,5,27,1,2,45,60,6,1.5]
	- Por index:
		for i in range(0, len(idade)):
			print(i) -> retorna o index
			print(idades[i]) -> retorna o valor do elemento
	- Por Elemento:
		for i in idade:
			print(i) -> retorna o valor do elemento
	
	
	
	
	



